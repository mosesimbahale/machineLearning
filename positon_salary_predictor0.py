# -*- coding: utf-8 -*-
"""positon-salary-predictor0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rSDXXjObKM2uy7m4lHuaf5fb12pHd8Fq


# SETUP
"""

from google.colab import drive
drive.mount ('/content/drive')

with open('/content/drive/My Drive/foo.txt', 'w') as f:
  f.write('Hello Google Drive!')
!cat /content/drive/My\ Drive/foo.txt

drive.flush_and_unmount()
print('All changes made in this colab session should now be visible in Drive.')

# Commented out IPython magic to ensure Python compatibility.
# Python ≥3.5 is required
import sys
assert sys.version_info >= (3, 5)

# Scikit-Learn ≥0.20 is required
import sklearn
assert sklearn.__version__ >= "0.20"

# Common imports
import numpy as np
import os

# To plot pretty figures
# %matplotlib inline
import matplotlib as mpl
import matplotlib.pyplot as plt
mpl.rc('axes', labelsize=14)
mpl.rc('xtick', labelsize=12)
mpl.rc('ytick', labelsize=12)

"""# LOADING THE DATASET"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
path ="/content/drive/MyDrive/Machine/datasets/position_salaries.csv"
df_bonus = pd.read_csv(path)# Dataset is now stored in a Pandas Dataframe

import pandas as pd
dataset = pd.read_csv("/content/drive/MyDrive/Machine/datasets/position_salaries.csv")
X = dataset.iloc[:, 1:2].values
y = dataset.iloc[:, 2].values

"""Here X is the independent variable which is the “Level” and y is the dependent variable which is the “Salary”.

1.   So for X, we specify    

X = dataset.iloc[:, 1:2].values
2.   And for y, we specify too

 dataset.iloc[:, 2].values

# VISUALIZING THE DATASET
"""

import pandas 

df = pandas.DataFrame(columns = ['Position','Level','Salary'])

pandas.read_csv('/content/drive/MyDrive/Machine/datasets/position_salaries.csv')

"""# FITTING LINEAR REGRESSION"""

from sklearn.linear_model import LinearRegression
lin_reg = LinearRegression()
lin_reg.fit(X,y)

np.array(X)

np.array(y)

"""# VISUALIZING LINEAR REGRESSION RESULTS"""

import matplotlib.pyplot as plt

plt.scatter(X,y, color="red")
plt.plot(X, lin_reg.predict(X))
plt.title("Linear Regression")
plt.xlabel("Level")
plt.ylabel("Salary")
plt.show()

"""If we look at the graph above, we can see that a person at level 4.5 should be offered a salary of around $100k.


let's predict and see
"""

lin_reg.predict([[4.5]])

"""We can see that the predicton is way off as it predicts $168k

# CONVERTING X TO POLYNOMIAL FORMAT

For Polynomial Regression, we need to transform our matrix X to X_poly where X_poly will contain X to the power of n — depending upon the degree we choose.
If we choose degree 2, then X_poly will contain X and X to the power 2.
If we choose degree 3, then X_poly will contain X, X to the power 2 and X to the power 3.
We will be using the PolynomialFeatures class from the sklearn.preprocessing library for this purpose. When we create an object of this class — we have to pass the degree parameter.
Let’s begin by choosing degree as 2. Then we call the fit_transform method to transform matrix X.
"""

from sklearn.preprocessing import PolynomialFeatures
poly_reg = PolynomialFeatures(degree=4)
X_poly = poly_reg.fit_transform(X)

"""**Take a look at X_poly**"""

df = pd.DataFrame (X_poly)
index=['0','1']
df

"""# FITTING POLYNOMIAL REGRESSION

Now we will create a new linear regression object called lin_reg_2 and pass X_poly to it instead of X that we passed in Step 2.
"""

lin_reg_2 = LinearRegression()
lin_reg_2.fit(X_poly,y)

"""# VISUALIZING POLYNOMIAL REGRESSION RESULTS and PREDICTING IT'S RESULTS"""

# degree to 2

#  Convert X to polynomial format
from sklearn.preprocessing import PolynomialFeatures
poly_reg = PolynomialFeatures(degree=2)
X_poly = poly_reg.fit_transform(X)

 # Passing X_poly to LinearRegression
lin_reg_2 = LinearRegression()
lin_reg_2.fit(X_poly,y)

# Visualize Poly Regression Results
plt.scatter(X,y, color="red")
plt.plot(X, lin_reg_2.predict(poly_reg.fit_transform(X)))
plt.title("Poly Regression Degree 2")
plt.xlabel("Level")
plt.ylabel("Salary")
plt.show()

# Polynomial Regression prediction
new_salary_pred = lin_reg_2.predict(poly_reg.fit_transform([[4.5]]))
print('The predicted salary of a person at 4.5 Level is ',new_salary_pred)

"""
# CHANGING DEGREE FROM 2 UPTO 8 and TO SEE IF WE GET BETTER RESULTS"""

# Change degree to 3 

# Convert X to polynomial format
from sklearn.preprocessing import PolynomialFeatures
poly_reg = PolynomialFeatures(degree=3)
X_poly = poly_reg.fit_transform(X)

 # Passing X_poly to LinearRegression
lin_reg_2 = LinearRegression()
lin_reg_2.fit(X_poly,y)

# Visualize Poly Regression Results
plt.scatter(X,y, color="red")
plt.plot(X, lin_reg_2.predict(poly_reg.fit_transform(X)))
plt.title("Poly Regression Degree 3")
plt.xlabel("Level")
plt.ylabel("Salary")
plt.show()

# Polynomial Regression prediction
new_salary_pred = lin_reg_2.predict(poly_reg.fit_transform([[4.5]]))
print('The predicted salary of a person at 4.5 Level is ',new_salary_pred)

# Change degree to 4 

# Convert X to polynomial format
from sklearn.preprocessing import PolynomialFeatures
poly_reg = PolynomialFeatures(degree=4)
X_poly = poly_reg.fit_transform(X)

 # Passing X_poly to LinearRegression
lin_reg_2 = LinearRegression()
lin_reg_2.fit(X_poly,y)

# Visualize Poly Regression Results
plt.scatter(X,y, color="red")
plt.plot(X, lin_reg_2.predict(poly_reg.fit_transform(X)))
plt.title("Poly Regression Degree 4")
plt.xlabel("Level")
plt.ylabel("Salary")
plt.show()

# Polynomial Regression prediction
new_salary_pred = lin_reg_2.predict(poly_reg.fit_transform([[4.5]]))
print('The predicted salary of a person at 4.5 Level is ',new_salary_pred)

# Change degree to 5

# Convert X to polynomial format
from sklearn.preprocessing import PolynomialFeatures
poly_reg = PolynomialFeatures(degree=5)
X_poly = poly_reg.fit_transform(X)

 # Passing X_poly to LinearRegression
lin_reg_2 = LinearRegression()
lin_reg_2.fit(X_poly,y)

# Visualize Poly Regression Results
plt.scatter(X,y, color="red")
plt.plot(X, lin_reg_2.predict(poly_reg.fit_transform(X)))
plt.title("Poly Regression Degree 5")
plt.xlabel("Level")
plt.ylabel("Salary")
plt.show()

# Polynomial Regression prediction
new_salary_pred = lin_reg_2.predict(poly_reg.fit_transform([[4.5]]))
print('The predicted salary of a person at 4.5 Level is ',new_salary_pred)

# Change degree to 6

# Convert X to polynomial format
from sklearn.preprocessing import PolynomialFeatures
poly_reg = PolynomialFeatures(degree=6)
X_poly = poly_reg.fit_transform(X)

 #  Passing X_poly to LinearRegression
lin_reg_2 = LinearRegression()
lin_reg_2.fit(X_poly,y)

# Visualize Poly Regression Results
plt.scatter(X,y, color="red")
plt.plot(X, lin_reg_2.predict(poly_reg.fit_transform(X)))
plt.title("Poly Regression Degree 6")
plt.xlabel("Level")
plt.ylabel("Salary")
plt.show()

# Polynomial Regression prediction
new_salary_pred = lin_reg_2.predict(poly_reg.fit_transform([[4.5]]))
print('The predicted salary of a person at 4.5 Level is ',new_salary_pred)

# Change degree to 7

# Convert X to polynomial format
from sklearn.preprocessing import PolynomialFeatures
poly_reg = PolynomialFeatures(degree=7)
X_poly = poly_reg.fit_transform(X)

 #  Passing X_poly to LinearRegression
lin_reg_2 = LinearRegression()
lin_reg_2.fit(X_poly,y)

# Visualize Poly Regression Results
plt.scatter(X,y, color="red")
plt.plot(X, lin_reg_2.predict(poly_reg.fit_transform(X)))
plt.title("Poly Regression Degree 7")
plt.xlabel("Level")
plt.ylabel("Salary")
plt.show()

# Polynomial Regression prediction
new_salary_pred = lin_reg_2.predict(poly_reg.fit_transform([[4.5]]))
print('The predicted salary of a person at 4.5 Level is ',new_salary_pred)

# Change degree to 8

# Convert X to polynomial format
from sklearn.preprocessing import PolynomialFeatures
poly_reg = PolynomialFeatures(degree=8)
X_poly = poly_reg.fit_transform(X)

 #  Passing X_poly to LinearRegression
lin_reg_2 = LinearRegression()
lin_reg_2.fit(X_poly,y)

# Visualize Poly Regression Results
plt.scatter(X,y, color="red")
plt.plot(X, lin_reg_2.predict(poly_reg.fit_transform(X)))
plt.title("Poly Regression Degree 8")
plt.xlabel("Level")
plt.ylabel("Salary")
plt.show()

# Polynomial Regression prediction
new_salary_pred = lin_reg_2.predict(poly_reg.fit_transform([[4.5]]))
print('The predicted salary of a person at 4.5 Level is ',new_salary_pred)

"""# CONCLUSION"""

# Polynomial Regression prediction
new_salary_pred = lin_reg_2.predict(poly_reg.fit_transform([[4]]))
print('The predicted salary of a person at 4 Level is ',new_salary_pred)

"""So in this case by using Linear Regression — at level 4.5 we got a prediction of $168k and 

by using Polynomial Regression we got a prediction of 94k.

A prediction of 79,127 at level 4 instead of 80,000  an accuracy of 98.908%
"""